generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum user_role {
  ADMIN
  USER
  MODERATOR
}

enum post_type {
  ANNOUNCEMENT
  BLOG
  GUIDE
  SHOWCASE
  EVENT
}

model user {
  id             String     @id @default(uuid()) @db.Uuid
  email          String     @unique
  name           String?
  avatar_url     String?
  bio            String?
  city           String?
  country        String?
  profile_views  Int        @default(0)
  role           user_role  @default(USER)
  discord_id     String     @unique
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  posts          post[]
  comments       comment[]
  followers      follow[]   @relation("Followers")
  following      follow[]   @relation("Following")
}

model post {
  id           String      @id @default(uuid()) @db.Uuid
  slug         String      @unique
  title        String
  preview      String
  content      String
  image_url    String
  type         post_type
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  views        Int         @default(0)
  likes        Int         @default(0)

  author       user        @relation(fields: [author_id], references: [id])
  author_id    String      @db.Uuid

  categories   category[]
  comments     comment[]

  @@index([created_at])
  @@index([type])
}

model comment {
  id           Int        @id @default(autoincrement())
  content      String
  likes        Int        @default(0)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?

  author       user       @relation(fields: [author_id], references: [id])
  author_id    String     @db.Uuid

  post         post       @relation(fields: [post_id], references: [id])
  post_id      String     @db.Uuid

  @@index([created_at])
}

model follow {
  id             String   @id @default(uuid()) @db.Uuid

  follower       user     @relation("Followers", fields: [follower_id], references: [id])
  follower_id    String   @db.Uuid

  following      user     @relation("Following", fields: [following_id], references: [id])
  following_id   String   @db.Uuid

  created_at     DateTime @default(now())

  @@unique([follower_id, following_id])
}

model category {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  slug         String    @unique
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  posts        post[]
}
